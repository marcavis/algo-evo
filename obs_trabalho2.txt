A resolução do problema começa com uma implementação simples de árvore binária -
sempre é um pouco estranho essa implementação em Python, já que os tipos
estáticos de linguagens como Java permitem criar um esqueleto de classe que 
faça sentido desde o começo.

É interessante já implementar a função de resolução de um cromossomo - podemos
ignorar a variável inicialmente, e trabalhar com constantes e operadores.

Nesse ponto já teremos que enfrentar o tratamento de divisões por zero;
nem lembrava que potenciação também poderia levar a elas...
    ZeroDivisionError: 0.0 cannot be raised to a negative power
Vamos ignorar esse ponto inicialmente também...

Algo que é importante no começo é poder visualizar as árvores - o programa
facilmente entende a representação em árvore de (2 + 3) * 4, mas fazer um
algoritmo para converter a árvore na representação acima pode dar algum trabalho...
A não ser pelo caminho mais fácil, de sempre rodear pares de folhas com parênteses -

    (-5 / ((5 - 4) - 2)) precisaria de apenas um par, mas a representação
    mais preguiçosa funciona bem, tornando claro que o resultado da expressão é 5.

Voltando ás divisões por zero... uma solução pode ser dar avaliação zero
(através do retorno de valor None quando da resolução da expressão) para uma
aplicação de função que tenha uma divisão por zero; por exemplo:
    
    (2 / x) terá avaliação garantida 0 quando x for igual a 2, mas será avaliada
    normalmente em outros casos (x = 1, ou x > 2) -
    talvez até seja a função melhor avaliada entre todas as opções.
    
    (x / (2 - 2)), porém, sempre terá uma divisão por zero, e será logo descartada.

Há de se verificar uma situação estranha... algumas expressões geram números complexos?
    (-2 ^ (5 / (5 + 3))) = (-0.5901785320977089+1.424817016411734j)
Melhor controlar os expoentes, para que números negativos não possam ser elevados
a potências fracionárias.

Há às vezes, alguns erros causados quando o programa tenta calcular números
extremamente grandes; por exemplo, 3^3^3^3 é um número grande demais para que Python
calcule, apesar de ser uma árvore não muito difícil de ser gerada.

Chegamos a uma opção sobre como avaliar divisões por zero - aplicando uma punição
na avaliação, similar à pressão pela parcimônia. Porém, se houver divisões por
zero em várias entradas, então a árvore deve ser descartada, tendo uma avaliação
inválida.

A varredura das árvores para selecionar o ponto de crossover é complicada... E
a manipulação das árvores no crossover, em si, também - uma primeira tentativa
tem causado alterações nos pais e não só nos filhos. É necessário criar uma
função que gere uma cópia de uma árvore!

Implementada a mutação, vê-se que ela ajuda um pouco a combater a redução
na diversidade genética conforme as eras passam.

O algoritmo está entregando a resposta correta na maioria dos casos, mas não
está com funcionamento ideal - talvez pelo fato de que pequenas alterações na árvore
causam grandes mudanças nos resultados das aplicações da função, o que é uma
certa dificuldade para o uso de programação genética, que idealmente espera
obter algumas melhoras ocasionais quando existem mudanças em alguns poucos genes.